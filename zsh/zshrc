# start in home directory
cd
# Uncomment this and the last 2 lines to see total RC load time
# startLoadTime=`gdate +%s.%N`

[ -f ~/.local/share/zsh/pre.zsh ] && source ~/.local/share/zsh/pre.zsh

source ~/.dotfiles/zsh/themes/luke-bergen.zsh
source ~/.dotfiles/zsh/env

# set cursor to block
echo -ne '\e[2 q'

# Python stuff
#export WORKON_HOME=~/.python-envs
#source /usr/local/bin/virtualenvwrapper.sh
alias pip=pip3
alias python=python3

# override the insecure one to be actually secure to make it so everywhere else just works correctly
alias node_insecure=node

# Ignore commands that start with a space (curling with passwords, etc...)
setopt HIST_IGNORE_SPACE
setopt CHASE_LINKS


# Stuff to enable ctrl-x ctrl-e to edit current command in editor
autoload -U edit-command-line
# Emacs style
zle -N edit-command-line
bindkey "^xe" edit-command-line
bindkey "^x^e" edit-command-line
bindkey '^E' end-of-line
bindkey '^A' beginning-of-line

# Vi style:
# zle -N edit-command-line
# bindkey -M vicmd v edit-command-line

# Bindings to make up and down search command history based on currently typed text
autoload -U history-beginning-search-backward
autoload -U history-beginning-search-forward
bindkey "^[[A" history-beginning-search-backward
bindkey "^[[B" history-beginning-search-forward

# aliases
# alias be="bundle exec"
# alias fs="foreman start"
# alias befs="bundle exec foreman start"
# alias befr="bundle exec foreman run"
alias gs="git status -s"
alias gb="git branch"
alias gc="git checkout \$1"
alias gl="git log --pretty=format:\"%h%x09%an%x09%ad%x09%s\" --no-merges \$1"
alias glm="git log --pretty=format:\"%h%x09%an%x09%ad%x09%s\" \$1"
alias gd="git diff"
alias lg="lazygit"
alias ll="ls -al"
#alias serve="ruby -run -e httpd . -p \$1"
alias fix_video="sudo killall VDCAssistant"
alias fix_audio="sudo killall coreaudiod"
alias R="R --silent"
alias vimx='vim -x --cmd "set cryptmethod=blowfish2" --cmd "set nobackup" --cmd "set noswapfile" --cmd "set viminfo=\"\"" -u NONE'
alias vimw="nvim -c 'normal ,ww'"
alias vim="nvim"
alias oldvim="command vim"
alias dockclean='docker rm $(docker ps -a -q -f status=exited); docker rmi $(docker images -f "dangling=true" -q)'
alias xml_pp='xmllint --format -'
alias pcp="rsync -r --progress"
#alias ctags="`brew --prefix`/bin/ctags"
alias rgf='rg --files | rg'
alias ver="vercel"
#alias ibrew="arch -x86_64 /usr/local/bin/brew"
alias trustbin="sudo xattr -dr com.apple.quarantine $1"
alias clearhist='echo -e "\033c"'

DEFAULT_OLLAMA_MODEL='quen3:8b' #'llama3.2:latest'
DEFAULT_OLLAMA_CODE_MODEL='codellama:latest'
alias ol="ollama run $DEFAULT_OLLAMA_MODEL"  # default

# hyprland specific stuff
alias rewaybar='pkill waybar; nohup waybar > /dev/null 2>&1 & disown'
alias hyp0='hyprctl keyword decoration:active_opacity 1.0'
alias hyp9='hyprctl keyword decoration:active_opacity 0.95'

# nothing is coming up as clean as I want it. there just isn't that much to improve upon cmd+tab to a term window and running vim + CC
#alias assist_win='/opt/homebrew/bin/kitty --config ~/.config/kitty/float.conf > /dev/null 2>&1 & echo $! > ~/.local/state/kitty/assist.pid'
#alias assist_win='env SHELL=$SHELL kitty --config ~/.config/kitty/float.conf > /dev/null 2>&1 &'
#alias assist_vim='nvim --cmd "let g:zen_mode = 1" -c CC'
#alias assist_vim2='nvim --cmd "let g:zen_mode = 1" -c LLM'

# trying everything possible to clear scrollback (kitty_mod+f just keeps seeing more stuff)
#ctrl_l() {
#    builtin print -rn -- $'\r\e[0J\e[H\e[22J' >"$TTY"
#    builtin zle .reset-prompt
#    builtin zle -R
#}
#zle -N ctrl_l
#bindkey '^l' ctrl_l

# *m*arkdown
function olm() {
  ol $1 | glow -
}

# *m*arkdown *s*hort
function olms() {
  ols $1 | glow -
}

alias md='glow -'

function rc() {
  if [ "$1" = "vim" ] || [ "$1" = "v" ]
  then
    pushd ~/.dotfiles/nvim/ > /dev/null
    nvim ./
    popd > /dev/null
  elif [ "$1" = "z" ] || [ "$1" = "zsh" ]
  then
    pushd ~/.dotfiles/zsh > /dev/null
    nvim ./zshrc
    popd > /dev/null
  elif [ "$1" = "k" ] || [ "$1" = "kitty" ]
  then
    pushd ~/.dotfiles/kitty > /dev/null
    nvim ./kitty.conf
    popd > /dev/null
  else
    pushd ~/.dotfiles/ > /dev/null
    nvim ./
    popd > /dev/null
  fi
}

function task() {
  if [ "$1" = "ls" ] || [ "$1" = "" ]
  then
    for f in ~/Documents/taskell/*.md; do
      echo "- $(basename $f .md)"
    done
  else
    pushd ~ > /dev/null
    taskell "Documents/taskell/$1.md"
    popd > /dev/null
  fi
}

# miscelanious configuration stuff
#export PGDATA="/usr/local/var/postgres"
export EDITOR=nvim

export ARCHFLAGS="-arch x86_64"

unsetopt inc_append_history
unsetopt share_history

# Plugins
# TODO: Need a better way to do this. Maybe git submodules?
source ~/.dotfiles/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

source /usr/share/nvm/init-nvm.sh

source <(fzf --zsh)

alias j="echo 'trying zoxide. Remember?' && return"
# Load auto-jump
#[ -f /opt/homebrew/etc/profile.d/autojump.sh ] && . /opt/homebrew/etc/profile.d/autojump.sh

#
## So I don't forget about this again. jp foo will jump to any directory _within_ the current directory
## So for example, while in code `jp foo` will jump to the best match within foo/** instead of to
## an even higher weighted "foo" directory that's somewhere else on the filesystem
#jp() {
#  pushd -q $(pwd)
#  if [[ ${1} == -* ]] && [[ ${1} != "--" ]]; then
#    autojump ${@}
#    return
#  else
#    j $(pwd) ${@}
#  fi
#}

# normally when you quit `yazi` it leaves you right where you started. But if you start it with `y`
# while in yazi, `q` will quit and set the cwd to wherever you were. `Q` exits yazi normally
function y() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		builtin cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

function n() {
  node -e "console.log($*)"
}

command -v zoxide &> /dev/null && eval "$(zoxide init --cmd cd zsh)"

alias pbcopy='xsel --clipboard --input'

# This fixes the <enter> inserting ^M instead of actually sending enter to some programs issue that came up for god knows what reason
stty icrnl
stty sane

[ -f ~/.local/share/zsh/post.zsh ] && source ~/.local/share/zsh/post.zsh


# BEGIN opam configuration
# This is useful if you're using opam as it adds:
#   - the correct directories to the PATH
#   - auto-completion for the opam binary
# This section can be safely removed at any time if needed.
#[[ ! -r '/Users/lukebergen/.opam/opam-init/init.zsh' ]] || source '/Users/lukebergen/.opam/opam-init/init.zsh' > /dev/null 2> /dev/null
# END opam configuration

# bun completions
[ -s "/home/luke/.bun/_bun" ] && source "/home/luke/.bun/_bun"

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"


# TODO: variablize this based on an env or something

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
#__conda_setup="$('/home/luke/miniconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
#if [ $? -eq 0 ]; then
#    eval "$__conda_setup"
#else
#    if [ -f "/home/luke/miniconda3/etc/profile.d/conda.sh" ]; then
#        . "/home/luke/miniconda3/etc/profile.d/conda.sh"
#    else
#        export PATH="/home/luke/miniconda3/bin:$PATH"
#    fi
#fi
#unset __conda_setup
# <<< conda initialize <<<

